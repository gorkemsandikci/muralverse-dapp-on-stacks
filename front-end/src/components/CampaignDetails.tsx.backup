"use client";
import {
  Container,
  Box,
  IconButton,
  Image,
  Text,
  Flex,
  useBreakpointValue,
  Heading,
  Progress,
  Button,
  SimpleGrid,
  Stat,
  StatLabel,
  StatNumber,
  StatHelpText,
  Alert,
  AlertTitle,
  AlertDescription,
  Spinner,
  Tooltip,
  VStack,
  HStack,
} from "@chakra-ui/react";
import { ChevronLeftIcon, ChevronRightIcon, InfoIcon } from "@chakra-ui/icons";
import { useContext, useEffect, useState } from "react";
import { CAMPAIGN_SUBTITLE, CAMPAIGN_TITLE, CAMPAIGN_GOAL_USD, THEME_COLORS, CAMPAIGN_MILESTONES, FUNDING_BREAKDOWN } from "@/constants/campaign";
import StyledMarkdown from "./StyledMarkdown";
import { useCampaignInfo, useExistingDonation } from "@/hooks/campaignQueries";
import { useCurrentBtcBlock } from "@/hooks/chainQueries";
import { format } from "timeago.js";
import DonationModal from "./DonationModal";
import HiroWalletContext from "./HiroWalletProvider";
import { useDevnetWallet } from "@/lib/devnet-wallet-context";
import {
  isDevnetEnvironment,
  isTestnetEnvironment,
} from "@/lib/contract-utils";
import { satsToSbtc, useCurrentPrices, ustxToStx } from "@/lib/currency-utils";
import { FUNDRAISING_CONTRACT } from "@/constants/contracts";
import { getRefundTx } from "@/lib/campaign-utils";
import { getStacksNetworkString } from "@/lib/stacks-api";
import useTransactionExecuter from "@/hooks/useTransactionExecuter";
import CampaignAdminControls from "./CampaignAdminControls";

export default function CampaignDetails({
  images,
  markdownContent,
}: {
  images: string[];
  markdownContent: string;
}) {
  const { mainnetAddress, testnetAddress } = useContext(HiroWalletContext);
  const { currentWallet: devnetWallet } = useDevnetWallet();
  const currentWalletAddress = isDevnetEnvironment()
    ? devnetWallet?.stxAddress
    : isTestnetEnvironment()
    ? testnetAddress
    : mainnetAddress;

  const [isDonationModalOpen, setIsDonationModalOpen] = useState(false);

  const [currentIndex, setCurrentIndex] = useState(0);
  const slideSize = useBreakpointValue({ base: "100%", md: "500px" });

  const { data: currentPrices } = useCurrentPrices();
  const { data: campaignInfo, error: campaignFetchError } =
    useCampaignInfo(currentPrices);
  const { data: currentBlock } = useCurrentBtcBlock();

  const campaignIsUninitialized = campaignInfo?.start === 0;
  const campaignIsExpired = !campaignIsUninitialized && campaignInfo?.isExpired;
  const campaignIsCancelled =
    !campaignIsUninitialized && campaignInfo?.isCancelled;

  const nextSlide = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === images.length - 1 ? 0 : prevIndex + 1
    );
  };

  const prevSlide = () => {
    setCurrentIndex((prevIndex) =>
      prevIndex === 0 ? images.length - 1 : prevIndex - 1
    );
  };

  useEffect(() => {
    const timer = setInterval(nextSlide, 5000);
    return () => clearInterval(timer);
  }, []);

  const progress = campaignInfo
    ? (campaignInfo.usdValue / campaignInfo.goal) * 100
    : 0;

  const blocksLeft = campaignInfo ? campaignInfo?.end - (currentBlock || 0) : 0;
  const secondsLeft = blocksLeft * 600; // estimate each block is 10 minutes
  const secondsLeftTimestamp = new Date(Date.now() - secondsLeft * 1000);

  const { data: previousDonation } = useExistingDonation(currentWalletAddress);

  const hasMadePreviousDonation =
    previousDonation &&
    (previousDonation?.stxAmount > 0 || previousDonation?.sbtcAmount > 0);

  const executeTx = useTransactionExecuter();

  const handleRefund = async () => {
    const txOptions = getRefundTx(
      getStacksNetworkString(),
      currentWalletAddress || ""
    );
    await executeTx(
      txOptions,
      devnetWallet,
      "Refund requested",
      "Refund not requested"
    );
  };

  return (
    <Container maxW="container.xl" py="8">
      <Flex direction="column" gap="6">
        {/* Street Art Hero Section */}
        <Box
          bg="linear-gradient(135deg, #00D4FF 0%, #FF6B35 50%, #39FF14 100%)"
          p={8}
          borderRadius="xl"
          textAlign="center"
          position="relative"
          overflow="hidden"
          mb={6}
        >
          <Box
            position="absolute"
            top={0}
            left={0}
            right={0}
            bottom={0}
            bg="url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><defs><pattern id=\"spray\" patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\"><circle cx=\"10\" cy=\"10\" r=\"2\" fill=\"rgba(255,255,255,0.1)\"/></pattern></defs><rect width=\"100\" height=\"100\" fill=\"url(%23spray)\"/></svg>')"
            opacity={0.3}
          />
          <VStack spacing={4} position="relative" zIndex={1}>
            <Heading
              size="2xl"
              color="white"
              fontFamily="graffiti"
              textShadow="2px 2px 4px rgba(0,0,0,0.5)"
            >
              {CAMPAIGN_TITLE}
            </Heading>
            <Text fontSize="xl" color="white" maxW="2xl">
              {CAMPAIGN_SUBTITLE}
            </Text>
            <HStack spacing={6} justify="center" wrap="wrap">
              <Stat textAlign="center" bg="rgba(255,255,255,0.2)" p={3} borderRadius="lg">
                <StatLabel color="white" fontSize="lg">Funding Goal</StatLabel>
                <StatNumber color="white" fontSize="2xl">${CAMPAIGN_GOAL_USD.toLocaleString()}</StatNumber>
              </Stat>
              <Stat textAlign="center" bg="rgba(255,255,255,0.2)" p={3} borderRadius="lg">
                <StatLabel color="white" fontSize="lg">Campaign Duration</StatLabel>
                <StatNumber color="white" fontSize="2xl">90 Days</StatNumber>
              </Stat>
              <Stat textAlign="center" bg="rgba(255,255,255,0.2)" p={3} borderRadius="lg">
                <StatLabel color="white" fontSize="lg">Beneficiary</StatLabel>
                <StatNumber color="white" fontSize="lg">Downtown Arts Collective</StatNumber>
              </Stat>
            </HStack>
          </VStack>
        </Box>

        <Flex direction="column" gap="1">
          <Heading fontFamily="graffiti" color="streetArt.darkAccent">{CAMPAIGN_TITLE}</Heading>
          <Text fontSize="lg" color="gray.600">{CAMPAIGN_SUBTITLE}</Text>
        </Flex>

        <SimpleGrid columns={{ base: 1, lg: 2 }} spacing={8} alignItems="start">
          {/* Left column: Image carousel */}
          <Box position="relative" width="full" overflow="hidden">
            <Flex width={slideSize} mx="auto" position="relative">
              <Image
                src={images[currentIndex]}
                alt={`Campaign image ${currentIndex + 1}`}
                objectFit="cover"
                width="full"
                height="auto"
              />
              <IconButton
                aria-label="Previous image"
                icon={<ChevronLeftIcon boxSize="5" />}
                onClick={prevSlide}
                position="absolute"
                left="2"
                top="50%"
                transform="translateY(-50%)"
                colorScheme="gray"
                rounded="full"
              />
              <IconButton
                aria-label="Next image"
                icon={<ChevronRightIcon boxSize="5" />}
                onClick={nextSlide}
                position="absolute"
                right="2"
                top="50%"
                transform="translateY(-50%)"
                colorScheme="gray"
                rounded="full"
              />
              <Text
                position="absolute"
                bottom="2"
                right="2"
                bg="blackAlpha.700"
                color="white"
                px="2"
                py="1"
                rounded="md"
                fontSize="sm"
              >
                {currentIndex + 1} / {images.length}
              </Text>
            </Flex>
          </Box>

          {/* Right column: Campaign stats & donation */}
          <Box>
            {campaignInfo &&
            currentWalletAddress === FUNDRAISING_CONTRACT.address ? (
              <CampaignAdminControls
                campaignIsUninitialized={campaignIsUninitialized}
                campaignIsExpired={!!campaignIsExpired}
                campaignIsCancelled={!!campaignIsCancelled}
                campaignIsWithdrawn={!!campaignInfo?.isWithdrawn}
              />
            ) : null}
            <Box p={6} borderRadius="lg" borderWidth="1px">
              {campaignIsUninitialized ? (
                <Flex direction="column" gap="4">
                  This campaign hasn&apos;t started yet!
                </Flex>
              ) : null}

              {campaignInfo && !campaignIsUninitialized ? (
                <Flex direction="column" gap={6}>
                  <SimpleGrid columns={2} spacing={4}>
                    <Stat>
                      <StatLabel>Raised</StatLabel>
                      <StatNumber>
                        $
                        {campaignInfo?.usdValue?.toLocaleString(undefined, {
                          minimumFractionDigits: 2,
                          maximumFractionDigits: 2,
                        })}
                      </StatNumber>
                      <StatHelpText>
                        of ${campaignInfo?.goal?.toLocaleString()} goal
                      </StatHelpText>
                    </Stat>
                    <Stat>
                      <StatLabel>Contributions</StatLabel>
                      <StatNumber>{campaignInfo?.donationCount}</StatNumber>
                      <StatHelpText>
                        {campaignIsExpired ? (
                          <Flex direction="column">
                            <Box>
                              Campaign expired
                              <Tooltip
                                label={
                                  <Flex direction="column" gap="1">
                                    <Box>
                                      Expired at: Block #{campaignInfo?.end}
                                    </Box>
                                    <Box>Current: Block #{currentBlock}</Box>
                                  </Flex>
                                }
                              >
                                <InfoIcon ml="1.5" mt="-3px" />
                              </Tooltip>
                            </Box>
                          </Flex>
                        ) : (
                          <Flex direction="column">
                            <Box>
                              {blocksLeft.toLocaleString()} BTC blocks left
                              <Tooltip
                                label={
                                  <Flex direction="column" gap="1">
                                    <Box>
                                      Started: Block #{campaignInfo?.start}
                                    </Box>
                                    <Box>Ends: Block #{campaignInfo?.end}</Box>
                                    <Box>Current: Block #{currentBlock}</Box>
                                  </Flex>
                                }
                              >
                                <InfoIcon ml="1.5" mt="-3px" />
                              </Tooltip>
                            </Box>
                            <Box>
                              (About{" "}
                              {format(secondsLeftTimestamp)?.replace(
                                " ago",
                                ""
                              )}
                              )
                            </Box>
                          </Flex>
                        )}
                      </StatHelpText>
                    </Stat>
                  </SimpleGrid>

                  <Box>
                    <Text fontSize="lg" fontWeight="bold" mb={3} color="streetArt.darkAccent">
                      🎨 Progress: Paint Can Filling Up!
                    </Text>
                    <Progress
                      value={progress}
                      size="lg"
                      borderRadius="full"
                      bg="streetArt.lightGray"
                      sx={{
                        '& > div': {
                          background: 'linear-gradient(90deg, #00D4FF 0%, #FF6B35 50%, #39FF14 100%)',
                          boxShadow: '0 0 20px rgba(0, 212, 255, 0.4)',
                        }
                      }}
                    />
                    <Text fontSize="sm" color="streetArt.primary" mt={2} textAlign="center">
                      {progress.toFixed(1)}% Complete - Your contribution just added color to our community!
                    </Text>
                  </Box>

                  {campaignIsExpired || campaignIsCancelled ? (
                    <Flex direction="column" gap="2">
                      <Box>
                        This fundraiser{" "}
                        {campaignIsCancelled ? "was cancelled" : "has ended"}.
                        {campaignIsCancelled
                          ? " Contributors are eligible for a refund."
                          : null}
                      </Box>
                      {hasMadePreviousDonation ? (
                        <Alert mb="4">
                          <Box>
                            <AlertTitle>
                              You contributed to this fundraiser.
                            </AlertTitle>
                            <AlertDescription>
                              <Box>
                                STX:{" "}
                                {Number(
                                  ustxToStx(previousDonation?.stxAmount)
                                ).toFixed(2)}
                              </Box>
                              <Box>
                                sBTC:{" "}
                                {satsToSbtc(
                                  previousDonation?.sbtcAmount
                                ).toFixed(8)}
                              </Box>
                            </AlertDescription>
                            <Box mt="4">
                              {!campaignIsCancelled ? (
                                <Box>Thanks for your contribution!</Box>
                              ) : (
                                <Button
                                  colorScheme="green"
                                  onClick={handleRefund}
                                >
                                  Request a Refund
                                </Button>
                              )}
                            </Box>
                          </Box>
                        </Alert>
                      ) : null}
                    </Flex>
                  ) : (
                    <Flex direction="column" gap="4">
                      <Button
                        size="lg"
                        colorScheme="green"
                        width="full"
                        onClick={() => {
                          setIsDonationModalOpen(true);
                        }}
                      >
                        Contribute Now
                      </Button>
                      <Box fontSize="xs">
                        <Box mb="2">
                          <strong>Flexible funding</strong>: Creator keeps
                          whatever money they raise, even if they don&apos;t hit
                          their target. No refunds to backers if the campaign
                          falls short.
                        </Box>
                        <Box>
                          The creator can always choose to cancel this
                          fundraiser and provide refunds.
                        </Box>
                      </Box>
                    </Flex>
                  )}
                </Flex>
              ) : campaignFetchError ? (
                <Box>
                  <Alert status="warning">
                    <Box>
                      <AlertTitle>Campaign Data Unavailable</AlertTitle>
                      <AlertDescription>
                        Unable to retrieve campaign data from the blockchain.
                        This could be due to network issues or the campaign may
                        no longer exist.
                      </AlertDescription>
                    </Box>
                  </Alert>
                </Box>
              ) : !campaignIsUninitialized ? (
                <Box w="full" textAlign="center">
                  <Spinner size="lg" />
                </Box>
              ) : null}
            </Box>
          </Box>
        </SimpleGrid>

        {/* Markdown content */}
        <StyledMarkdown>{markdownContent}</StyledMarkdown>

        {/* Funding Breakdown Section */}
        <Box
          border="3px solid"
          borderColor="streetArt.primary"
          borderRadius="xl"
          p={6}
          bg="white"
          position="relative"
          overflow="hidden"
        >
          <Box
            position="absolute"
            top={-10}
            right={-10}
            w="100px"
            h="100px"
            bg="streetArt.accent"
            borderRadius="full"
            opacity={0.1}
          />
          <Box
            position="absolute"
            bottom={-15}
            left={-15}
            w="80px"
            h="80px"
            bg="streetArt.secondary"
            borderRadius="full"
            opacity={0.1}
          />
          
          <VStack spacing={6} align="stretch">
            <Heading size="lg" fontFamily="graffiti" color="streetArt.darkAccent" textAlign="center">
              💰 How Your Money Will Be Used
            </Heading>
            
            <SimpleGrid columns={{ base: 1, md: 2, lg: 4 }} spacing={4}>
              {FUNDING_BREAKDOWN.map((item, index) => (
                <Box
                  key={index}
                  p={4}
                  border="2px solid"
                  borderColor="streetArt.lightGray"
                  borderRadius="lg"
                  bg="white"
                  textAlign="center"
                  transition="all 0.3s"
                  _hover={{
                    transform: "translateY(-4px)",
                    borderColor: "streetArt.primary",
                    boxShadow: "0 10px 25px rgba(0, 212, 255, 0.2)",
                  }}
                >
                  <Text fontSize="2xl" mb={2}>
                    {item.percentage === 40 ? "🎨" : 
                     item.percentage === 30 ? "🖌️" : 
                     item.percentage === 20 ? "🏗️" : "🎉"}
                  </Text>
                  <Text fontSize="lg" fontWeight="bold" color="streetArt.darkAccent" mb={1}>
                    {item.category}
                  </Text>
                  <Text fontSize="2xl" fontWeight="bold" color="streetArt.primary" mb={1">
                    {item.percentage}%
                  </Text>
                  <Text fontSize="lg" color="streetArt.secondary" fontWeight="bold">
                    ${item.amount.toLocaleString()}
                  </Text>
                </Box>
              ))}
            </SimpleGrid>
          </VStack>
        </Box>

        {/* Campaign Timeline Section */}
        <Box
          border="3px solid"
          borderColor="streetArt.secondary"
          borderRadius="xl"
          p={6}
          bg="white"
          position="relative"
          overflow="hidden"
        >
          <Box
            position="absolute"
            top={-8}
            left={-8}
            w="60px"
            h="60px"
            bg="streetArt.accent"
            borderRadius="full"
            opacity={0.1}
          />
          
          <VStack spacing={6} align="stretch">
            <Heading size="lg" fontFamily="graffiti" color="streetArt.darkAccent" textAlign="center">
              ⏰ Project Timeline
            </Heading>
            
            <SimpleGrid columns={{ base: 1, md: 2 }} spacing={6}>
              {CAMPAIGN_MILESTONES.map((milestone, index) => (
                <Box
                  key={index}
                  p={4}
                  border="2px solid"
                  borderColor="streetArt.lightGray"
                  borderRadius="lg"
                  bg="white"
                  position="relative"
                  transition="all 0.3s"
                  _hover={{
                    transform: "translateY(-4px)",
                    borderColor: "streetArt.secondary",
                    boxShadow: "0 10px 25px rgba(255, 107, 53, 0.2)",
                  }}
                >
                  <HStack spacing={3} mb={3}>
                    <Box
                      w="40px"
                      h="40px"
                      bg="streetArt.secondary"
                      borderRadius="full"
                      display="flex"
                      alignItems="center"
                      justifyContent="center"
                      color="white"
                      fontWeight="bold"
                      fontSize="lg"
                    >
                      {index + 1}
                    </Box>
                    <VStack align="start" spacing={1}>
                      <Text fontSize="lg" fontWeight="bold" color="streetArt.darkAccent">
                        Week {milestone.week}
                      </Text>
                      <Text fontSize="md" fontWeight="bold" color="streetArt.secondary">
                        {milestone.phase}
                      </Text>
                    </VStack>
                  </HStack>
                  <Text fontSize="sm" color="gray.600">
                    {milestone.description}
                  </Text>
                </Box>
              ))}
            </SimpleGrid>
          </VStack>
        </Box>
      </Flex>
      <DonationModal
        isOpen={isDonationModalOpen}
        onClose={() => {
          setIsDonationModalOpen(false);
        }}
      />
    </Container>
  );
}
